apiVersion: v1
kind: ServiceAccount
metadata:
  name: ironic-credentials
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ironic-credentials
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ironic-credentials
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ironic-credentials
subjects:
  - kind: ServiceAccount
    name: ironic-credentials
---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-ironic-credentials
  annotations:
    # TODO: Replace with documented annotation
    # Docs: https://kubectl.docs.kubernetes.io/guides/extending_kustomize/#generator-options
    # Issue: https://github.com/kubernetes-sigs/kustomize/issues/4833
    internal.config.kubernetes.io/needsHashSuffix: "enabled"
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: ironic-credentials
      volumes:
        - name: credentials
          emptyDir: {}
      initContainers:
        - name: init-credentials
          image: httpd:2.4.46
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          command: [bash, -c]
          args:
            - |
              set -e
              username=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16)
              password=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 64)

              echo -n "$username" > /credentials/username
              echo -n "$password" >  /credentials/password
              htpasswd -b -c -B /credentials/htpasswd "$username" "$password"
      containers:
        - name: create-secret
          image: bitnami/kubectl:1.28.4
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          command: [bash, -c]
          args:
            - |
              set -eEuo pipefail
              if kubectl get secret ironic-credentials -o name; then
                exit 0
              fi

              kubectl create secret generic ironic-credentials --from-file=/credentials
